---
import Layout from '../../layouts/Layout.astro';
import { data, getNotationById, getPaperById } from '../../lib/data-separated';
import { url } from '../../lib/url';
import TypstRender from '../../components/typst-render/index.astro';

export async function getStaticPaths() {
  return data.notations.map((notation) => ({
    params: { id: notation.id },
  }));
}

const { id } = Astro.params;
const notation = getNotationById(id!);

if (!notation) {
  return Astro.redirect(url('/404'));
}
---

<Layout title={`${notation.name} - Notation`}>
  <div>
    <a href={url('/notations')} class="text-primary hover:text-primary/80 inline-flex items-center gap-1">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
      Back to Notations
    </a>

    <div class="mt-6 bg-white shadow-lg rounded-lg overflow-hidden">
      <!-- Header with notation -->
      <div class="bg-gradient-to-r from-gray-50 to-white px-8 py-6 border-b">
        <h1 class="text-3xl font-bold text-gray-900 flex items-center gap-3 flex-wrap">
          <span class="bg-white rounded-lg px-4 py-2 shadow-sm border border-gray-200">
            <TypstRender src={notation.typstString} />
          </span>
          <span class="text-gray-500 font-normal">for</span>
          <span>{notation.name}</span>
        </h1>
      </div>

      <div class="p-8">
        <!-- Description -->
        <div class="prose prose-gray max-w-none">
          <p class="text-lg text-gray-700">{notation.description}</p>
        </div>

        <!-- Key Information Grid -->
        <div class="mt-8 grid gap-6 md:grid-cols-2">
          <!-- Syntax Information -->
          <div class="bg-gray-50 rounded-lg p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Syntax Forms</h2>
            <div class="space-y-3">
              <div>
                <span class="text-xs font-medium text-gray-600 uppercase tracking-wide">Typst</span>
                <code class="mt-1 block bg-white px-3 py-2 rounded border border-gray-200 font-mono text-sm">
                  {notation.typstString}
                </code>
              </div>
              {notation.latexString && (
                <div>
                  <span class="text-xs font-medium text-gray-600 uppercase tracking-wide">LaTeX</span>
                  <code class="mt-1 block bg-white px-3 py-2 rounded border border-gray-200 font-mono text-sm">
                    {notation.latexString}
                  </code>
                </div>
              )}
            </div>
          </div>

          <!-- Semantic Information -->
          <div class="bg-blue-50 rounded-lg p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Semantic Information</h2>
            <div class="space-y-4">
              {notation.aliases.length > 0 && (
                <div>
                  <span class="text-xs font-medium text-gray-600 uppercase tracking-wide">Also Known As</span>
                  <ul class="mt-1 space-y-1">
                    {notation.aliases.map((alias) => (
                      <li class="text-gray-700">• {alias}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {notation.tags.length > 0 && (
                <div>
                  <span class="text-xs font-medium text-gray-600 uppercase tracking-wide">Categories</span>
                  <div class="mt-2 flex flex-wrap gap-2">
                    {notation.tags.map((tag) => (
                      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Usage in Papers -->
    {notation.papers.length > 0 && (
      <div class="mt-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-4">Academic Usage</h2>
        <div class="space-y-3">
          {notation.papers.map((usage) => {
            const paper = getPaperById(usage.paperId);
            return paper ? (
              <div class="bg-white shadow rounded-lg p-5 hover:shadow-md transition-shadow">
                <div class="flex items-start justify-between gap-4">
                  <div class="flex-1">
                    <h3 class="font-semibold text-lg">
                      <a
                        href={url(`/papers/${paper.id}`)}
                        class="text-gray-900 hover:text-primary transition-colors"
                      >
                        {paper.title}
                      </a>
                    </h3>
                    <p class="text-sm text-gray-600 mt-1">
                      {paper.authors.join(', ')} • {paper.year}
                    </p>
                    {usage.context && (
                      <p class="text-sm text-gray-700 mt-2 bg-gray-50 rounded p-2">
                        <strong>Context:</strong> {usage.context}
                      </p>
                    )}
                    {usage.pageNumber && (
                      <p class="text-xs text-gray-500 mt-1">
                        Referenced on page {usage.pageNumber}
                      </p>
                    )}
                  </div>
                  {usage.isPrimaryDefinition && (
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                      Primary Definition
                    </span>
                  )}
                </div>
              </div>
            ) : null;
          })}
        </div>
      </div>
    )}
  </div>
</Layout>