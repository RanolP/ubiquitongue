---
import Layout from '../../layouts/Layout.astro';
import { data, getNotationById, getPaperById } from '../../lib/data-separated';
import { url } from '../../lib/url';
import { SyntaxDisplay } from '../../components/solid/SyntaxDisplay';

export async function getStaticPaths() {
  return data.notations.map((notation) => ({
    params: { id: notation.id },
  }));
}

const { id } = Astro.params;
const notation = getNotationById(id!);

if (!notation) {
  return Astro.redirect(url('/404'));
}
---

<Layout title={notation.name}>
  <div>
    <a href={url('/notations')} class="text-primary hover:text-primary/80">← Back to Notations</a>
    
    <h1 class="mt-4 text-3xl font-bold text-gray-900">{notation.name}</h1>
    
    <div class="mt-6 bg-white shadow rounded-lg p-6">
      <h2 class="text-lg font-semibold text-gray-900">Description</h2>
      <p class="mt-2 text-gray-600">{notation.description}</p>
      
      <div class="mt-6">
        <h3 class="text-sm font-medium text-gray-700 mb-3">Notation Forms</h3>
        <div class="space-y-4">
          <div>
            <span class="text-xs text-gray-500 uppercase tracking-wide">Typst</span>
            <div class="mt-1">
              <SyntaxDisplay 
                syntax={{
                  id: notation.id,
                  typstString: notation.typstString,
                  typstCanonical: notation.typstCanonical,
                  description: '',
                  latexString: notation.latexString
                }} 
                showDescription={false}
                client:load 
              />
            </div>
          </div>
          
          {notation.latexString && (
            <div>
              <span class="text-xs text-gray-500 uppercase tracking-wide">LaTeX</span>
              <code class="mt-1 block bg-gray-50 px-3 py-2 rounded font-mono text-sm">
                {notation.latexString}
              </code>
            </div>
          )}
          
          {notation.unicodeString && (
            <div>
              <span class="text-xs text-gray-500 uppercase tracking-wide">Unicode</span>
              <div class="mt-1 text-2xl">
                {notation.unicodeString}
              </div>
            </div>
          )}
          
          <div>
            <span class="text-xs text-gray-500 uppercase tracking-wide">Canonical Form</span>
            <code class="mt-1 block bg-gray-50 px-3 py-2 rounded font-mono text-sm">
              {notation.typstCanonical}
            </code>
          </div>
        </div>
      </div>
      
      {notation.tags.length > 0 && (
        <div class="mt-6">
          <h3 class="text-sm font-medium text-gray-700">Tags</h3>
          <div class="mt-2 flex gap-2">
            {notation.tags.map((tag) => (
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                {tag}
              </span>
            ))}
          </div>
        </div>
      )}
      
      {notation.aliases.length > 0 && (
        <div class="mt-6">
          <h3 class="text-sm font-medium text-gray-700">Also known as</h3>
          <ul class="mt-2 text-gray-600">
            {notation.aliases.map((alias) => (
              <li>• {alias}</li>
            ))}
          </ul>
        </div>
      )}
    </div>

    {notation.papers.length > 0 && (
      <div class="mt-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-4">Used in Papers</h2>
        <div class="space-y-3">
          {notation.papers.map((usage) => {
            const paper = getPaperById(usage.paperId);
            
            return paper ? (
              <div class="bg-white shadow rounded-lg p-4">
                <div class="flex items-start justify-between">
                  <div>
                    <h3 class="font-medium">
                      <a href={url(`/papers/${paper.id}`)} class="text-primary hover:text-primary/80">
                        {paper.title}
                      </a>
                    </h3>
                    <p class="text-sm text-gray-600 mt-1">
                      {paper.authors.join(', ')} • {paper.year}
                    </p>
                    {usage.context && (
                      <p class="text-sm text-gray-500 mt-2">{usage.context}</p>
                    )}
                    {usage.pageNumber && (
                      <p class="text-sm text-gray-500">Page {usage.pageNumber}</p>
                    )}
                  </div>
                  {usage.isPrimaryDefinition && (
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      Primary Definition
                    </span>
                  )}
                </div>
              </div>
            ) : null;
          })}
        </div>
      </div>
    )}
  </div>
</Layout>